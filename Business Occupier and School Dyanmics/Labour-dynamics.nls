;The Labor Dynamics Model simulates the process of labor allocation, including the process of employment and unemployment.
;Firm agents, businessman agents, and school agents are the agents that provide jobs. 
;Due to the dynamic birth, growth, and closure of firm agents, businessman agents, and school agents, the number of available jobs in the market fluctuates every simulation year. 
;Before the simulation starts, each firm agent, businessman agent, and school agent first evaluate their employment situation by comparing the number of jobs it can provide with the number of employees it currently has. 
;Based on this comparison, the model updates the required number of employees for each entity and adjusts their employment status accordingly.


to labour-dynamics
  ;Temporally using color to label people
  ;Blue: employee-unemployee
  ;Yellow: unemployee-employee
  ;Red: working location change
  
  let status-change []
  let place-change []
  
  if pop-output = 1
  [
    let filefolder (word "Output Data/" year "/Business and school")
    let filename (word "Labor dynamics " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Business and school/Labor dynamics " year ".csv")
    file-print "PID, previous_status, new_status, previous_work, new_work"
  ]
  
  ask firms [set size-firm count in-employee-neighbors]
  ask schools [set lab-sch count in-employee-neighbors]
  ask businessmen [set busi-size count in-employee-neighbors]
  
  ;If the current staff count is greater than the required count, randomly reduce the workforce to meet the requirement.
  ask firms with [size-firm > emp-req and size-firm > 0]
  [
    ask n-of (size-firm - emp-req) people with [employee-neighbor? myself] 
    [
      set welong one-of in-employee-neighbors
      ask my-employees [die]
      set status 3
      set color blue
    ]
  ]
  ask schools with [lab-sch > lab-sch-req and school-size > 0]
  [
    ask n-of (lab-sch - lab-sch-req) people with [employee-neighbor? myself] 
    [
      set welong one-of in-employee-neighbors
      ask my-employees [die]
      set status 3
      set color blue
    ]
  ]
  ask businessmen with [busi-size > emp-req and busi-size > 0]
  [
    ask n-of (busi-size - emp-req) people with [employee-neighbor? myself] 
    [
      set welong one-of in-employee-neighbors
      ask my-employees [die]
      set status 3
      set color blue
    ]
  ]
  
  
  ;This simulates the job-seeking process. 
  ;For any unemployed individual, if there are facility agents in the market with staff vacancies (i.e., their required number of employees is greater than their current number), the following code is executed. 
  ;A gravity model is then used to determine which facility the individual will choose to work for.
  while [count people with [status = 3] > 0 and (count firms with [count in-employee-neighbors < emp-req] > 0 or count schools with [count in-employee-neighbors < lab-sch-req] > 0 or count businessmen with [count in-employee-neighbors < emp-req] > 0)]
  [
    ;Mark the facility agents that need to be recruited in yellow
    ask firms with [count in-employee-neighbors < emp-req] [set color yellow]
    ask schools with [count in-employee-neighbors < lab-sch-req] [set color yellow]
    ask businessmen with [count in-employee-neighbors < emp-req] [set color yellow]
    
    let candidates up-to-n-of 100 turtles with [(is-firm? self or is-school? self or is-businessman? self) and color = yellow]
    ask one-of people with [status = 3]
    [
      ;gravity model
      let IDs []
      let B-wei-lab []
      ask candidates 
      [
        let spa-lab 0
        (ifelse
          is-firm? self [set spa-lab emp-req - count in-employee-neighbors]
          is-businessman? self [set spa-lab emp-req - count in-employee-neighbors]
          is-school? self [set spa-lab lab-sch-req - count in-employee-neighbors]
        )
        set dis-can distance myself 
        if dis-can = 0 [set dis-can 0.1]
        let my-wei-lab (spa-lab / dis-can / B-coe-dis-lab)
        set IDs lput who IDs 
        set B-wei-lab lput my-wei-lab B-wei-lab
      ]
      py:set "IDs" IDs
      py:set "B_wei_lab" B-wei-lab
      (py:run
        "chosen_id = random.choices(IDs, B_wei_lab)"
      )
      let chosenid item 0 py:runresult "chosen_id"
      let target turtle chosenid      
      create-employee-with target
      set status 2
      if color = blue [set color red] ;change work location
      if color = white [set color yellow] ;from unemployee to employee
      set dis-cur distance target
      ask one-of households with [hhd = [hhd] of myself] [set flexible flexible + 1]
    ]
    
    ask turtles with [(is-firm? self or is-school? self or is-businessman? self) and color = yellow][set color white]
  ]
  
  ;update income
  ask people with [color = blue][set income 0]
  ask people with [color = yellow][set income random-normal (mean [income] of people with [status = 2]) 1 if income < P-min-inco [set income P-min-inco]]  
  
  ;update human mobility  
  ;update daily plan of people whose working status changes
  ask people with [color = blue or color = yellow]
  [
    set chain-weekday []
    set chain-weekend []
    set plan-weekday [] 
    set plan-weekend []
  ]
  
  ;Blue: employee-unemployee
  ask people with [color = blue]
  [
    if pop-output = 1
    [
      file-print (word PID "," 2 "," 3 "," welong "," "Null")
    ]
    set welong 0
    set welat 0
    
    ;check whether the person agent in a household without rf
    let hh one-of households with [hhd = [hhd] of myself]
    if count rfs with [link-neighbor? hh] = 0 [set color black]
    
    if color != black 
    [
      set status-change lput PID status-change
      (ifelse
        DailyPlan = "Full" 
        [
          let target one-of people with [color = white and (status = 3 or status = 4) and length plan-weekday != 0 and length plan-weekend != 0]
          set chain-weekday [chain-weekday] of target
          set chain-weekend [chain-weekend] of target
          let dur-weekday extract-duration [plan-weekday] of target
          let dur-weekend extract-duration [plan-weekend] of target
          generate-full-new-plans dur-weekday dur-weekend
        ]
        DailyPlan = "Typical" 
        [
          let target one-of people with [color = white and (status = 3 or status = 4) and length plan-weekday != 0]
          set chain-weekday [chain-weekday] of target
          let dur-weekday extract-duration [plan-weekday] of target
          generate-typical-new-plan  dur-weekday
        ]
        DailyPlan = "Simple" []
      )
      set color white
    ]
  ]
  
  ;Yellow: unemployee-employee
  ask people with [color = yellow]
  [
    set welong [long] of one-of in-employee-neighbors
    set welat [lat] of one-of in-employee-neighbors
    ;check whether the person agent in a household without rf
    let hh one-of households with [hhd = [hhd] of myself]
    if count rfs with [link-neighbor? hh] = 0 [set color black]
    
    if color != black 
    [
      set status-change lput pid status-change
      (ifelse
        DailyPlan = "Full" 
        [
          let target one-of people with [color = white and status = 2  and length plan-weekday != 0 and length plan-weekend != 0]
          set chain-weekday [chain-weekday] of target
          set chain-weekend [chain-weekend] of target
          let dur-weekday extract-duration [plan-weekday] of target
          let dur-weekend extract-duration [plan-weekend] of target
          generate-full-new-plans dur-weekday dur-weekend
        ]
        DailyPlan = "Typical" 
        [
          let target one-of people with [color = white and status = 2 and length plan-weekday != 0]
          set chain-weekday [chain-weekday] of target
          let dur-weekday extract-duration [plan-weekday] of target
          generate-typical-new-plan  dur-weekday
        ]
        DailyPlan = "Simple" []
      )
      
      if pop-output = 1
      [
        let previous_work "Null"
        let new_work one-of in-employee-neighbors
        file-print (word PID "," 3 "," 2 "," previous_work "," new_work)
      ]    
      set color white
    ]
  ]
  
  ;working location change
  ask people with [color = red]
  [
    if pop-output = 1 [file-print (word PID "," 2 "," 2 "," welong "," one-of in-employee-neighbors)]  ;previous_work stored in "welong"
    set welong [long] of one-of in-employee-neighbors
    set welat [lat] of one-of in-employee-neighbors
    ;check whether the person agent in a household without rf
    let hh one-of households with [hhd = [hhd] of myself]
    if count rfs with [link-neighbor? hh] = 0 [set color black]
    
    if color != black 
    [
      set place-change lput pid place-change
      if DailyPlan != "Simple" 
      [
        work-change one-of in-employee-neighbors 
      ]
      set color white
    ]
  ]
  
  ask firms with [count in-employee-neighbors = 0][die]
  
  file-close-all
  
  
  ;update daily plan xml file
  if dai-output = "Year-End" 
  [
    let i (length status-change - 1)
    while [i >= 0] 
    [
      let target one-of people with [pid = item i status-change]
      ask target [set plan-changed 1]
      set i i - 1
    ]
  ]
  
  if dai-output = "Always" and dailyplan != "Simple"
  [
    ;work status 
    let filefolder (word "Output Data/" year "/Human mobility/Labor dynamics")
    let filename (word "Status change " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Human mobility/Labor dynamics/Status change " year ".csv")
    ifelse dailyplan = "Typical" [file-print "PID,Weekday"][file-print "PID,Weekday,Weekend"]
    
    let i (length status-change - 1)
    while [i >= 0] 
    [
      let target one-of people with [pid = item i status-change]
      ask target [ifelse dailyplan = "Typical" [file-print (word PID "," plan-weekday)][file-print (Word PID "," plan-weekday "," plan-weekend)]]
      set i i - 1
    ]
    file-close
    
    ;update daily plan
    let csv_file (list "csv_file" (word "Output Data/" year "/Human mobility/Labor dynamics/Status change " year ".csv"))
    let xml_file (list "xml_file" "Output Data/DailyPlan.xml")
    let second_path (list "second_path" (word "Output Data/" year "/Human mobility/Labor dynamics/DailyPlan_status_change.xml"))
    let speeds (list "speeds" (word A-v))
    ifelse route = 1
    [
      let params (list csv_file xml_file second_path speeds)
      let request web:make-request "http://127.0.0.1:5000/generate_full_plan" "POST" params []
      print request
    ]
    [
      let detour_factors (list "detour_factors" (word A-rte))
      let params (list csv_file xml_file second_path speeds detour_factors)
      let request web:make-request "http://127.0.0.1:5000/generate_full_plan_without_route" "POST" params []
      print request
    ]
    
    set filefolder (word "Output Data/" year "/Human mobility/Labor dynamics")
    set filename (word "Place change " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Human mobility/Labor dynamics/Place change " year ".csv")
    file-print "PID,Weekday"
    
    set i (length place-change - 1)
    while [i >= 0] 
    [
      let target one-of people with [pid = item i place-change]
      ask target [file-print (word PID "," plan-weekday)]
      set i i - 1
    ]
    file-close
    
    ;update daily plan
    set csv_file (list "csv_file" (word "Output Data/" year "/Human mobility/Labor dynamics/Place change " year ".csv"))
    set xml_file (list "xml_file" "Output Data/DailyPlan.xml")
    set second_path (list "second_path" (word "Output Data/" year "/Human mobility/Labor dynamics/DailyPlan_place_change.xml"))
    set speeds (list "speeds" (word A-v))
    ifelse route = 1
    [
      let params (list csv_file xml_file second_path speeds)
      let request web:make-request "http://127.0.0.1:5000/generate_weekday_plan" "POST" params []
      print request
    ]
    [
      let detour_factors (list "detour_factors" (word A-rte))
      let params (list csv_file xml_file second_path speeds detour_factors)
      let request web:make-request "http://127.0.0.1:5000/generate_weekday_plan_without_route" "POST" params []
      print request
    ]
  ]
  print "Labour dynamics finished"
end





