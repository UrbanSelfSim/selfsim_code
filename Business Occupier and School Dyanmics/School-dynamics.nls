schools-own
[
  SchID ;ID of school
  Long ;longitude
  lat ;latitude
  Stype ;Types of school, defined in configuration file "Education School.csv"
  capacity ;The recommended maximum student capacity for each school, which can still accommodate additional students even if the limit is reached.
  spa-sch; number of available spots for students
  School-size ; number of students in the school
  lab-sch-req ;number of employees required
  lab-sch ;number of employees in the school
  dis-can
]

;The School Dynamics Model consists of School Birth Model, School Growth Model, School Closure Model, and School Choice Model. 
;Among these, the School Birth Model is closely linked to the Education Model within the Demographic Evolution Model. 
;While the Education Model determines the number of students that need to be allocated to each type of school agent, the School Birth Model determines the number of new school facilities to be established,
;along with their employees, capacities, and locations according to the student demand. 
;The School Growth Model focuses on updating the number of employees required at each school agent as the school size (the number of students studying at the school agent) changes. 
;The School Closure Model defines the criteria under which schools are shut down. The School Choice Model is closely linked to the School Closure Model, Education Model and Immigration Model within the Demographic Evolution Model (see the Section ‎3.1.1). When a school agent is closed in the School Closure Model, when new students move into the area as simulated by the Immigration Model, or when students’ progress to a new education level in the Education Model, the School Choice Model is triggered to assign these students to appropriate school facilities.

to school-dynamics-model
  ;update attributes of schools
  ask schools [set spa-sch capacity - count in-student-neighbors set school-size count in-student-neighbors]
  let max-stype max [stype] of schools
  set b-stu-last b-stu-cur
  set b-stu-cur []
  let i 0 
  while [i < max-stype]
  [
    set i i + 1
    set b-stu-cur lput sum [count in-student-neighbors] of schools with [stype = i] b-stu-cur
  ] 

  school-closure
  school-growth
  school-birth
  ask schools [set school-size count in-student-neighbors]
  ask schools [set color white set size 0.5]
  print "school-model finished"
end

to school-birth
  if bus-output = 1
  [
    let filefolder (word "Output Data/" year "/Business and school")
    let filename (word "School birth " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/business and school/School birth " year ".csv")
    file-print "SchID,exist_school,Stype,capacity"
  ]
  
  ;Verify the number of schools of each type and their student populations to determine whether new schools need to be established.
  let num-type max [stype] of schools
  let i 1
  while [i <= num-type]
  [
    let total-capacity sum [capacity] of schools with [stype = i]
    if total-capacity = 0 [set total-capacity 1]
    let total-student sum [count in-student-neighbors] of schools with [stype = i]
    let B-coe-lab-sch-i item (i - 1) B-coe-lab-sch
    if total-student / total-capacity > B-pro-bir-sch
    [
      ;Step 1: determine number of school i will be created
      let num-increase round ((item (i - 1) B-stu-last - item (i - 1) B-stu-cur) * B-coe-sch)
      if num-increase < 0 [set num-increase 0]
      ;Step 2: location choice
      ;calaculate demand for school i
      ask patches with [admin = 1] [ifelse count schools-here with [stype = i] > 0 [set dem-school sum [count in-student-neighbors] of schools-here with [stype = i] / sum [capacity] of schools-here with [stype = i]][set dem-school 0]]
      ;Select grids with high demand as candidate locations for construction.
      ask max-n-of num-increase patches with [admin = 1] [dem-school]
      [
        set pcolor blue
        ask neighbors [set pcolor blue]
      ]
        
      create-schools num-increase
      [
        let target one-of patches with [pcolor = blue]
        ;If there is already a school of this type in the grid, it will be expanded; if not, a new one will be added.
        let num 0
        ask target [set num count schools-here with [stype = i]]
        ifelse num > 0 
        [
          ask target [ask one-of schools-here with [stype = i] [set capacity capacity +  round (mean [capacity] of schools with [stype = i])] set pcolor black]
          die
          if bus-output = 1 [file-print (word [SchID] of one-of schools-here with [stype = i] "," 1 "," i "," round (mean [capacity] of schools with [stype = i]))]
        ]
        [
          set SchID max [SchID] of schools + 1
          set stype i
          set capacity round (mean [capacity] of schools with [stype = i])
          if bus-output = 1 [file-print (word SchID "," 0 "," stype "," capacity)]
          set lab-sch-req round (capacity / B-coe-lab-sch-i)
          if lab-sch-req = 0 [set lab-sch-req 1]
          move-to target
          ask target [set pcolor black]
          ;Calculate latitude and longitude
          let long1 []
          let lat1 []
          let xcor1 []
          let ycor1 []
          ask Schools with [long != 0 and lat != 0]
          [
            set xcor1 lput xcor xcor1
            set ycor1 lput ycor ycor1
            set long1 lput long long1
            set lat1 lput lat lat1
          ]
          py:set "xcor1" xcor1
          py:set "ycor1" ycor1
          py:Set "long1" long1
          py:set "lat1" lat1  
          py:set "xcor2" xcor
          py:Set "ycor2" ycor
          (py:run
            "import numpy as np"
            "from scipy.optimize import curve_fit"
            "import pandas as pd"
            "def polynomial_function(x, a, b, c, d):"
            " return a * x**3 + b * x**2 + c * x + d"
            
            "params_x, _ = curve_fit(polynomial_function, xcor1, long1)"
            "params_y, _ = curve_fit(polynomial_function, ycor1, lat1)"
            "long2 = polynomial_function(xcor2, *params_x)"
            "lat2 = polynomial_function(ycor2, *params_y)"
         )
          set long py:runresult "long2"
          set lat py:runresult "lat2"
          set color white
        ]
      ]
      ask patches with [pcolor = blue][set pcolor black]
    ]
    set i i + 1
  ]
  file-close-all
end

  ;Schools' capacity increases and decreases
  ;In this case, except from kendergartens, other schools' capacity will increase if the number of students is greater than the capacity plus 'T-school-increase' for consecutve years, and will decrease if the number of students is smaller than the capacity plus 'T-school-decrease' for consecutve years
to school-growth
  ;Adjust the required number of staff based on the student-to-staff ratio and the student population of each school.
  let num-type max [stype] of schools
  let i 1
  while [i <= num-type]
  [
    ask schools with [stype = i]
    [
      set lab-sch-req round (count in-student-neighbors / item (i - 1) B-coe-lab-sch)
      if lab-sch-req = 0 [set lab-sch-req 1]
    ]
    set i i + 1
  ]
end


to school-closure
  if bus-output = 1
  [
    let filefolder (word "Output Data/" year "/Business and school")
    let filename (word "School closure " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Business and school/School closure " year ".csv")
    file-print "SchID, Stype, capacity, size, num_student"
  ]
  
  ask schools [set color white]
  ;if students of a school is small than a threshold, the school will close.
  let max-stype max [stype] of schools
  let i 1
  while [i <= max-stype]
  [
    ifelse count schools with [stype = i and count in-student-neighbors < B-sch-clo] < count schools with [stype = i]
    [
      ask schools with [count in-student-neighbors < B-sch-clo and stype = i]
      [   
        if bus-output = 1 [file-print (word SchID "," Stype "," Capacity "," count in-employee-neighbors "," count in-student-neighbors)]
        
        ;staffs will break their employee linkk with the school, and will break shopping and leisuring links arround the school
        ask in-employee-neighbors
        [
          ask my-employees [die]
          set welong 0 
          set welat 0
          set status 3
          if color != black [set color red]
        ]
        ask my-students [die]
        set color red
      ]
    ]
    [
      ask n-of (count schools with [stype = i] - 1) schools with [stype = i and count in-student-neighbors < B-sch-clo]
      [   
        if bus-output = 1 [file-print (word SchID "," Stype "," Capacity "," count in-employee-neighbors "," count in-student-neighbors)]
        ;staffs will break their employee linkk with the school, and will break shopping and leisuring links arround the school
        ask in-employee-neighbors
        [
          ask my-employees [die]
          set welong 0 
          set welat 0
          set status 3
          if color != black [set color red]
        ]
        ask my-students [die]
        set color red
      ]
    ]
    set i i + 1
  ]
  file-close-all
  
  ;Allocate students to a new school, and update daily plan
  let student-list []
  let num-education length P-edu-sch
  set i 1
  while [i < num-education]
  [
    let edu1 item 0 (item i P-edu-sch)
    let stype1 item 1 (item i P-edu-sch)
    ask people with [status = 1 and education = edu1 and count in-student-neighbors = 0]
    [
      set student-list lput PID student-list
      let school1 student-education-change stype1
      create-student-with school1
      set welong [long] of school1
      set welat [lat] of school1
      if color != black [education-change school1 set student-list lput PID student-list] ;update daily plan
      ask one-of households with [hhd = [hhd] of myself] [set flexible flexible + 1]
    ]
    set i i + 1
  ]
  ; update xml of students
  if dai-output = "Always" and dailyplan != "Simple"
  [
    let filefolder (word "Output Data/" year "/Human mobility/School closure")
    let filename (word "School closure student " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Human mobility/School closure/School closure student " year ".csv")
    file-print "PID,Weekday"
    
    set i (length student-list - 1)
    while [i >= 0] 
    [
      let target one-of people with [pid = item i student-list]
      ask target [file-print (word PID "," plan-weekday)] 
      set i i - 1
    ]
    file-close
    
    ;update daily plan xml
    let csv_file (list "csv_file" (word "Output Data/" year "/Human mobility/School closure/School closure student " year ".csv"))
    let xml_file (list "xml_file" "Output Data/DailyPlan.xml")
    let second_path (list "second_path" (word "Output Data/" year "/Human mobility/School closure/DailyPlan_SchStu.xml"))
    let speeds (list "speeds" (word A-v))
    ifelse route = 1
    [
      let params (list csv_file xml_file second_path speeds)
      let request web:make-request "http://127.0.0.1:5000/generate_weekday_plan" "POST" params []
      print request
    ]
    [
      let detour_factors (list "detour_factors" (word A-rte))
      let params (list csv_file xml_file second_path speeds detour_factors)
      let request web:make-request "http://127.0.0.1:5000/generate_weekday_plan_without_route" "POST" params []
      print request
    ]
  ]
  
  if dai-output = "Year-End" and dailyplan != "Simple"
  [
    set i (length student-list - 1)
    while [i >= 0] 
    [
      let target one-of people with [pid = item i student-list]
      ask target [set plan-changed 1] 
      set i i - 1
    ]
  ]
  
  ;update daily plan of employees
  if dai-output = "Always" and dailyplan != "Simple"
  [
    let filefolder (word "Output Data/" year "/Human mobility/School closure")
    let filename (word "School closure employee " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Human mobility/School closure/School closure employee " year ".csv")
    ifelse dailyplan = "Typical" [file-print "PID,Weekday"][file-print "PID,Weekday,Weekend"]
  ]
  
  ask people with [color = red]
  [
    set chain-weekday []
    set chain-weekend []
    set plan-weekday []
    set plan-weekend []
  ]
  ask people with [color = red]
  [
    (ifelse
      dailyplan = "Simple" []
      dailyplan = "Typical" 
      [
        let target one-of people with [(status = 3 or status = 4) and length plan-weekday != 0]
        set chain-weekday [chain-weekday] of target
        let dur-weekday extract-duration [plan-weekday] of target
        generate-typical-new-plan  dur-weekday
        if dai-output = "Always" [file-print (word PID "," Plan-weekday)]
        if dai-output = "Year-End" [set plan-changed 1]
      ]
      dailyplan = "Full" 
      [
        let target one-of people with [(status = 3 or status = 4) and length plan-weekday != 0]
        set chain-weekday [chain-weekday] of target
        set chain-weekend [chain-weekend] of target
        let dur-weekday extract-duration [plan-weekday] of target
        let dur-weekend extract-duration [plan-weekend] of target
        generate-full-new-plans dur-weekday dur-weekend
        if dai-output = "Always" [file-print (word PID "," Plan-weekday "," Plan-weekend)]
        if dai-output = "Year-End" [set plan-changed 1]
      ]
    )
    set color white
  ]
  file-close
  
  ;update daily plan
  if dai-output = "Always"
  [
    let csv_file (list "csv_file" (word "Output Data/" year "/Human mobility/School closure/School closure employee " year ".csv"))
    let xml_file (list "xml_file" "Output Data/DailyPlan.xml")
    let second_path (list "second_path" (word "Output Data/" year "/Human mobility/School closure/DailyPlan_SchEmp.xml"))
    let speeds (list "speeds" (word A-v))
    ifelse route = 1
    [
      let params (list csv_file xml_file second_path speeds)
      let request web:make-request "http://127.0.0.1:5000/generate_full_plan" "POST" params []
      print request
    ]
    [
      let detour_factors (list "detour_factors" (word A-rte))
      let params (list csv_file xml_file second_path speeds detour_factors)
      let request web:make-request "http://127.0.0.1:5000/generate_full_plan_without_route" "POST" params []
      print request
    ]
  ]
  
  ask schools with [color = red][die]
end
