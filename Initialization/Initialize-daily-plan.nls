to initialize-daily-plan
  ;This function performs two key operations:
  ;1. Extracts travel patterns and the daily plan for each person agent when the daily plan version is 'typical' or 'full'.
  ;2. Calculates the customer flow for all businessman agents.
  print (word "dailyplan = [" dailyplan "]") 
  
  (ifelse
    dailyplan = "Simple" 
    [
      ask businessmen with [Category = 1]
      [
        let living-cus count people in-radius neighborhood
        let we-cus 0
        ask businessmen in-radius neighborhood [set we-cus we-cus + count in-employee-neighbors]
        ask firms in-radius neighborhood [set we-cus we-cus + count in-employee-neighbors]
        ask schools in-radius neighborhood [set we-cus we-cus + count in-employee-neighbors]
        ask schools in-radius neighborhood [set we-cus we-cus + count in-student-neighbors]
        
        set flow B-coe-liv-sho * living-cus + B-coe-we-sho * we-cus
      ]
      ask businessmen with [Category = 2]
      [
        let living-cus count people in-radius neighborhood
        let we-cus 0
        ask businessmen in-radius neighborhood [set we-cus we-cus + count in-employee-neighbors]
        ask firms in-radius neighborhood [set we-cus we-cus + count in-employee-neighbors]
        ask schools in-radius neighborhood [set we-cus we-cus + count in-employee-neighbors]
        ask schools in-radius neighborhood [set we-cus we-cus + count in-student-neighbors]
        
        set flow B-coe-liv-lei * living-cus + B-coe-liv-lei * we-cus
      ]
    ]
    dailyplan = "Typical" 
    [
      py:set "inputfile" (word "Scenarios/" Study-Area "/Daily Plan/DailyPlan.xml")
      py:set "outputfile" (word "Output Data/" year "/Daily Plan/Distribution")
      ;extract activities from dailyplan.xml
      (py:run "subprocess.run(['python', 'Human Mobility/DailyPlantoCSV.py', '--input', inputfile, '--output_dir', outputfile])")
        
      ;read activity chain
      ask people [set chain-weekday [] set plan-weekday []]
      file-open (word "Output Data/" year "/Daily Plan/Distribution/typical_weekday_activities.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        if item 0 data != "PID"
        [
          let PID1 item 0 data
          let Activity1 item 1 data
          let FacilityID1 item 2 data
          let Duration1 item 5 data
          let Mode1 item 6 data
          let target one-of people with [PID = PID1]
          let my-household one-of households with [HHD = [HHD] of target]
          ask target
          [
            set chain-weekday lput activity1 chain-weekday
            let facility nobody
            (ifelse
              activity1 = "home" [set facility one-of RFs with [in-rent-neighbor? my-household or in-purchase-neighbor? my-household]]
              activity1 = "work" [set facility one-of in-employee-neighbors]
              activity1 = "education" [set facility one-of in-student-neighbors]
              activity1 = "shopping" [set facility turtle FacilityID1 create-shopping-with facility ask one-of my-shoppings with [other-end = facility][set daytype 1]]
              activity1 = "leisure" [set facility turtle FacilityID1 create-leisure-with facility ask one-of my-leisures with [other-end = facility][set daytype 1]]
            )
            let long1 [long] of facility
            let lat1 [lat] of facility
            set plan-weekday lput (list activity1 facility long1 lat1 duration1 mode1) plan-weekday
          ]
        ]
      ]
      
      ;read distribution
      set H-sho-loc-weekday []
      set H-lei-loc-weekday []
      set H-mode-vo-weekday [] ;[[prob-Bus-2km prob-Private_vehicle-2km prob-Subway-2km prob-Taxi-2km prob-Two_wheels-2km prob-Walking-2km] [prob of 2-5km] [prob of 5-10km] [prob of 10-20km] [prob of > 20km]]
      set H-mode-nvo-weekday []
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_shopping_distribution.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-sho-loc-weekday lput item 1 data H-sho-loc-weekday
      ]
      set H-sho-loc-weekday remove-item 0 H-sho-loc-weekday
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_leisure_distribution.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-lei-loc-weekday lput item 1 data H-lei-loc-weekday
      ]
      set H-lei-loc-weekday remove-item 0 H-lei-loc-weekday
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_vehicle_choice.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-mode-vo-weekday lput (list item 1 data item 2 data item 3 data item 4 data item 5 data item 6 data item 7 data) H-mode-vo-weekday
      ]
      set H-mode-vo-weekday remove-item 0 H-mode-vo-weekday
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_non_vehicle_choice.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-mode-nvo-weekday lput (list item 1 data item 2 data item 3 data item 4 data item 5 data item 6 data item 7 data) H-mode-nvo-weekday
      ]
      set H-mode-nvo-weekday remove-item 0 H-mode-nvo-weekday
      file-close
      
      ;Businessmen calculate customer flow
      ask businessmen with [Category = 1] [set flow count my-shoppings * 7]
      ask businessmen with [Category = 2] [set flow count my-leisures * 7]
    ]
    ;dailyplan = "Full"
    [
      ;extract activities from dailyplan.xml
      py:set "inputfile" (word "Scenarios/" Study-Area "/Daily Plan/DailyPlan.xml")
      py:set "outputfile" (word "Output Data/" year "/Daily Plan/Distribution")
      ;extract activities from dailyplan.xml
      (py:run "subprocess.run(['python', 'Human Mobility/DailyPlantoCSV.py', '--input', inputfile, '--output_dir', outputfile])")
      ;read activity chain on weekday
      ask people [set chain-weekday [] set plan-weekday []]
      file-open (word "Output Data/" year "/Daily Plan/Distribution/typical_weekday_activities.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        if item 0 data != "PID"
        [
          let PID1 item 0 data
          let Activity1 item 1 data
          let FacilityID1 item 2 data
          let Duration1 item 5 data
          let Mode1 item 6 data
          let target one-of people with [PID = PID1]
          let my-household one-of households with [HHD = [HHD] of target]
          ask target
          [
            set chain-weekday lput activity1 chain-weekday
            let facility nobody
            (ifelse
              activity1 = "home" [set facility one-of RFs with [in-rent-neighbor? my-household or in-purchase-neighbor? my-household]]
              activity1 = "work" [set facility one-of in-employee-neighbors]
              activity1 = "education" [set facility one-of in-student-neighbors]
              activity1 = "shopping" [set facility turtle FacilityID1 create-shopping-with facility ask one-of my-shoppings with [other-end = facility][set daytype 1]]
              activity1 = "leisure" [set facility turtle FacilityID1 create-leisure-with facility ask one-of my-leisures with [other-end = facility][set daytype 1]]
            )
            let long1 [long] of facility
            let lat1 [lat] of facility
            let plan1 (list activity1 facility long1 lat1 duration1 mode1)
            set plan-weekday lput plan1 plan-weekday
          ]
        ]
      ]
      ;read activity chain on weekend
      ask people [set chain-weekend [] set plan-weekend []]
      file-open (word "Output Data/" year "/Daily Plan/Distribution/typical_weekend_activities.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        if item 0 data != "PID"
        [
          let PID1 item 0 data
          let Activity1 item 1 data
          let FacilityID1 item 2 data
          let Duration1 item 5 data
          let Mode1 item 6 data
          let target one-of people with [PID = PID1]
          let my-household one-of households with [HHD = [HHD] of target]
          ask target
          [
            set chain-weekday lput activity1 chain-weekday
            let facility nobody
            (ifelse
              activity1 = "home" [set facility one-of RFs with [in-rent-neighbor? my-household or in-purchase-neighbor? my-household]]
              activity1 = "shopping" [set facility turtle FacilityID1 create-shopping-with facility ask one-of my-shoppings with [other-end = facility][set daytype 1]]
              activity1 = "leisure" [set facility turtle FacilityID1 create-leisure-with facility ask one-of my-leisures with [other-end = facility][set daytype 1]]
            )
            let long1 [long] of facility
            let lat1 [lat] of facility
            let plan1 (list activity1 facility long1 lat1 duration1 mode1)
            set plan-weekend lput plan1 plan-weekend
          ]
        ]
      ]
      ;read distribution
      set H-sho-loc-weekday []
      set H-lei-loc-weekday []
      set H-sho-loc-weekend []
      set H-lei-loc-weekend []
      set H-mode-vo-weekday [] ;[[prob-Bus-2km prob-Private_vehicle-2km prob-Subway-2km prob-Taxi-2km prob-Two_wheels-2km prob-Walking-2km] [prob of 2-5km] [prob of 5-10km] [prob of 10-20km] [prob of > 20km]]
      set H-mode-nvo-weekday []
      set H-mode-vo-weekend [] ;[[prob-Bus-2km prob-Private_vehicle-2km prob-Subway-2km prob-Taxi-2km prob-Two_wheels-2km prob-Walking-2km] [prob of 2-5km] [prob of 5-10km] [prob of 10-20km] [prob of > 20km]]
      set H-mode-nvo-weekend []
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_shopping_distribution.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-sho-loc-weekday lput item 1 data H-sho-loc-weekday
      ]
      set H-sho-loc-weekday remove-item 0 H-sho-loc-weekday
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_leisure_distribution.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-lei-loc-weekday lput item 1 data H-lei-loc-weekday
      ]
      set H-lei-loc-weekday remove-item 0 H-lei-loc-weekday
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekend_shopping_distribution.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-sho-loc-weekend lput item 1 data H-sho-loc-weekend
      ]
      set H-sho-loc-weekend remove-item 0 H-sho-loc-weekend
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekend_leisure_distribution.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-lei-loc-weekend lput item 1 data H-lei-loc-weekend
      ]
      set H-lei-loc-weekend remove-item 0 H-lei-loc-weekend
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_vehicle_choice.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-mode-vo-weekday lput (list item 1 data item 2 data item 3 data item 4 data item 5 data item 6 data item 7 data) H-mode-vo-weekday
      ]
      set H-mode-vo-weekday remove-item 0 H-mode-vo-weekday
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekday_non_vehicle_choice.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-mode-nvo-weekday lput (list item 1 data item 2 data item 3 data item 4 data item 5 data item 6 data item 7 data) H-mode-nvo-weekday
      ]
      set H-mode-nvo-weekday remove-item 0 H-mode-nvo-weekday
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekend_vehicle_choice.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-mode-vo-weekend lput (list item 1 data item 2 data item 3 data item 4 data item 5 data item 6 data item 7 data) H-mode-vo-weekend
      ]
      set H-mode-vo-weekend remove-item 0 H-mode-vo-weekend
      file-close
      
      file-open (word "Output Data/" year "/Daily Plan/Distribution/weekend_non_vehicle_choice.csv")
      while [not file-at-end?]
      [
        let data csv:from-row file-read-line
        set H-mode-nvo-weekend lput (list item 1 data item 2 data item 3 data item 4 data item 5 data item 6 data item 7 data) H-mode-nvo-weekend
      ]
      set H-mode-nvo-weekend remove-item 0 H-mode-nvo-weekend
      file-close
      
      ;businessmen calculate customer flow
      ask businessmen with [Category = 1] [set flow count my-shoppings with [daytype = 1] * 5 + count my-shoppings with [daytype = 2] * 2]
      ask businessmen with [Category = 2] [set flow count my-leisures with [daytype = 1] * 5 + count my-leisures with [daytype = 2] * 2]
    ]
   )
  print "Daily plan is initialized"
end