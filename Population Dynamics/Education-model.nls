;Education model simulates the educational progression of agents through a series of user-defined education levels. 
;Users can specify the number of education levels and define each level according to their specific requirements.

to education-model
  ;let new daily plan 
  ;check the behaviors of students: stay in current school, further education (status = 5), or wait to get employed (status = 3)
  let graduate-list []
  
  ask people with [status = 1] 
  [ 
    ifelse edu-year < edu-year-required  
    [set edu-year edu-year + 1];stay in current school
    [
      set status 5
      ask my-students [die] ;clear link with current school
    ]
  ]
  
  if pop-output = 1
  [
    let filefolder (word "Output Data/" year "/Population")
    let filename (word "Graduates awaiting employment " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Population/Graduates awaiting employment " year ".csv")
    file-print "PID, education_level"
  ]
  
  ;determine whether to get further education or to hunt a job
  let number length P-pro-fur
  while [number > 0]
  [
    set number number - 1
    let edu-pro item number P-pro-fur
    let edu item 0 edu-pro
    let prob item 1 edu-pro
    ask people with [education = edu and status = 5 and count in-student-neighbors = 0]
    [
      ifelse random-float 1 < prob 
      [
        set status 5
      ]
      [
        set graduate-list lput PID graduate-list
        if pop-output = 1 [file-print (word PID "," education)]
        set status 3
        set chain-weekday []
        set chain-weekend []
        set plan-weekday [] 
        set plan-weekend []
        (ifelse
          DailyPlan = "Full" 
          [
            let target one-of people with [color = white and (status = 3 or status = 4) and (length plan-weekday != 0 and length plan-weekend != 0)]
            set chain-weekday [chain-weekday] of target
            set chain-weekend [chain-weekend] of target
            let dur-weekday extract-duration [plan-weekday] of target
            let dur-weekend extract-duration [plan-weekend] of target
            generate-full-new-plans dur-weekday dur-weekend
          ]
          DailyPlan = "Typical" 
          [
            let target one-of people with [color = white and (status = 3 or status = 4) and length plan-weekday != 0]
            set chain-weekday [chain-weekday] of target
            let dur-weekday extract-duration [plan-weekday] of target
            generate-typical-new-plan dur-weekday
          ]
          DailyPlan = "Simple" []
        )
      ]
    ]
  ]
  file-close-all
  
  if dai-output = "Always" and dailyplan != "Simple"
  [
    let filefolder (word "Output Data/" year "/Human mobility/Education")
    let filename (word "Graduates list " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Human mobility/Education/Graduates list " year ".csv")
    ifelse dailyplan = "Typical" [file-print "PID,Weekday"] [file-print "PID,Weekday,Weekend"]
    
    let i (length graduate-list - 1)
    while [i >= 0] 
    [
      let target one-of people with [pid = item i graduate-list]
      ask target [ifelse dailyplan = "Typical" [file-print (word PID "," plan-weekday)] [file-print (word PID "," plan-weekday "," plan-weekend)]]
      set i i - 1
    ]
    file-close
    
    if route = 1
    [
      ;update daily plan
      let csv_file (list "csv_file" (word "Output Data/" year "/Human mobility/Education/Graduates list " year ".csv"))
      let second_path (list "second_path" (word "Output Data/" year "/Human mobility/Education/DailyPlan_Graduates.xml"))
      let xml_file (list "xml_file" "Output Data/DailyPlan.xml")
      let speeds (list "speeds" (word A-v))
      let params (list csv_file xml_file second_path speeds)
      let request web:make-request "http://127.0.0.1:5000/generate_full_plan" "POST" params []
      print request
    ]
    if route = 0
    [
      ;update daily plan
      let csv_file (list "csv_file" (word "Output Data/" year "/Human mobility/Education/Graduates list " year ".csv"))
      let second_path (list "second_path" (word "Output Data/" year "/Human mobility/Education/DailyPlan_Graduates.xml"))
      let xml_file (list "xml_file" "Output Data/DailyPlan.xml")
      let speeds (list "speeds" (word A-v))
      let detour_factors (list "detour_factors" (word A-rte))
      let params (list csv_file xml_file second_path speeds detour_factors)
      let request web:make-request "http://127.0.0.1:5000/generate_full_plan_without_route" "POST" params []
      print request
    ]
  ]
  
  
  
  if dai-output = "Year-End" 
  [
    let i (length graduate-list - 1)
    while [i >= 0] 
    [
      let target one-of people with [pid = item i graduate-list]
      ask target [set plan-changed 1]
      set i i - 1
    ]
  ]
  
  ;update flexible triggers of households
  ask people with [status = 5]
  [
    ask one-of households with [hhd = [hhd] of myself][set flexible flexible + 1]
  ]
  
  higher-education
  student-higher-school-choice
  print "eduation-model finished"
end

to higher-education
  ;Determine which level of education each student advancing will attend.
  let higher-edu-list []
  ask people with [status = 5][set higher-edu-list lput PID higher-edu-list]
  
  if pop-output = 1
  [
    let filefolder (word "Output Data/" year "/Population")
    let filename (word "Students advanced to higher education " year ".csv")
    clear-file filefolder filename
    file-open (word "Output Data/" year "/Population/Students advanced to higher education " year ".csv")
    file-print "pid, education_level, previous_education_level"
  ]
  
  let number1 length P-edu-fur
  while [number1 > 0]
  [
    set number1 number1 - 1
    let edu-pro item number1 P-edu-fur
    let education1 item 0 edu-pro
    let education2 item 1 edu-pro
    let prob item 2 edu-pro 
    ask up-to-n-of (round prob * (count people with [education = education1 and status = 5] + 1)) people with [education = education1 and status = 5] 
    [
      if pop-output = 1 [file-print (word PID "," education "," education2)]
      set education education2
    ]
  ]
  file-close-all
end